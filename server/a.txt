i will show the whole code inside client src component navbar navbar.jsx import React, { useState } from 'react';
import './Navbar.css';
import { Link } from 'react-router-dom';

const Navbar = ({ onSearch }) => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');

    const toggleMenu = () => {
        setIsMenuOpen(!isMenuOpen);
    };

    const handleSearch = (event) => {
        const query = event.target.value;
        setSearchQuery(query);
        onSearch(query); // Pass search input to Home.jsx
    };

    return (
        <nav className="navbar">
            <div className="navbar__logo">
                <span className="navbar__logo-text">QuestionBank</span>
                <button className="navbar__menu-button" onClick={toggleMenu}>
                    ‚ò∞
                </button>
            </div>
            <div className={navbar__content ${isMenuOpen ? 'active' : ''}}>
                <ul className="navbar__links">
                    <li><Link to="/" className="navbar__link">Home</Link></li>
                    <li><Link to="/createpost" className="navbar__link">Create Post</Link></li>
                </ul>
                <div className="navbar__search">
                    <input 
                        type="text" 
                        placeholder="Search by topic..." 
                        className="navbar__search-input" 
                        value={searchQuery}
                        onChange={handleSearch}
                    />
                    <button className="navbar__search-button">üîç</button>
                </div>
            </div>
        </nav>
    );
};

export default Navbar;, inside client src pages createPost CreatePost.jsx  import React, { useEffect, useState } from 'react';
import './CreatePost.css';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';

const CreatePost = () => {
  const [heading, setHeading] = useState('');
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState('');
  const navigate = useNavigate();
  const { postID } = useParams();
  const url = "http://localhost:8000/api/v1";

  const loadPosts = async () => {
    try {
      const response = await axios.get(${url}/getsinglepost?postID=${postID});
      const post = response?.data?.responseData;
      if (post) {
        setHeading(post?.topic);
        setQuestion(post?.question);
        setAnswer(post?.answer);
      }
      console.log(post);
    } catch (error) {
      console.error(error);
    }
  }

  useEffect(() => {
    if (postID) {
      console.log("loadin post...")
      loadPosts();
    }
    // eslint-disable-next-line
  }, [postID])


  const submitDetails = async (e) => {
    e.preventDefault();
    try {
      if (!postID) {
        const response = await axios.post(${url}/createpost, {
          topic: heading,
          question,
          answer
        });
        if (response?.data?.responseData) {
          setHeading("");
          setQuestion("");
          setAnswer("");
          navigate('/');
        }
      } else {
        const response = await axios.put(${url}/updatepost, {
          postID,
          topic: heading,
          question,
          answer
        });
        if (response?.data?.responseData) {
          setHeading("");
          setQuestion("");
          setAnswer("");
          navigate(/${postID});
        }
      }
    } catch (error) {
      console.error(error);
    }
  }

  return (
    <div className="create-post">
      <h1 className="create-post__title">Create a New Post</h1>
      <form className="create-post__form">
        <div className="create-post__field">
          <label htmlFor="heading" className="create-post__label">Heading:</label>
          <input
            type="text"
            id="heading"
            className="create-post__input"
            value={heading}
            onChange={(e) => setHeading(e.target.value)}
            required
          />
        </div>
        <div className="create-post__field">
          <label htmlFor="question" className="create-post__label">Question:</label>
          <textarea
            id="question"
            className="create-post__textarea"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            required
          />
        </div>
        <div className="create-post__field">
          <label htmlFor="answer" className="create-post__label">Answer:</label>
          <textarea
            id="answer"
            className="create-post__textarea"
            value={answer}
            onChange={(e) => setAnswer(e.target.value)}
            required
          />
        </div>
        <button onClick={submitDetails} type="submit" className="create-post__submit">{postID ? 'Update Post' : 'Create Post'}</button>
      </form>
    </div>
  );
};

export default CreatePost; , inside client src home Cart.jsx import React from 'react';
import './Card.css';
import { useNavigate } from 'react-router-dom';

const Card = ({ post }) => {
    const navigate = useNavigate();

    return (
        <div className="card" onClick={() => navigate(/${post._id})}>
            <h2 className="card__heading">{post?.topic}</h2>
            <div className="card__content">
                <p className="card__question"><strong>Q:</strong> {post?.question}</p>
                <p className="card__answer"><strong>A:</strong> {post?.answer}</p>
            </div>
        </div>
    );
};

export default Card;
inside client src home Home.jsx import { useEffect, useState } from "react";

const Home = () => {
  const [posts, setPosts] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");

  // Fetch posts from backend
  useEffect(() => {
    fetch("http://localhost:5000/api/getposts") // Ensure correct endpoint
      .then((res) => res.json())
      .then((data) => {
        console.log("Fetched Posts:", data); // Debugging log
        setPosts(data);
      })
      .catch((err) => console.error("Error fetching posts:", err));
  }, []);

  // Filter posts based on search term
  const filteredPosts = searchTerm
    ? posts.filter((post) =>
        post.topic.toLowerCase().includes(searchTerm.toLowerCase())
      )
    : posts; // Show all posts if no search term

  return (
    <div>
      <h1>QuestionBank</h1>

      {/* Search Bar */}
      <input
        type="text"
        placeholder="Search by topic..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />

      {/* Display Posts */}
      <div>
        {filteredPosts.length > 0 ? (
          filteredPosts.map((post) => (
            <div key={post._id} className="post-card">
              <h2>{post.topic}</h2>
              <h3>{post.question}</h3>
              <p>{post.answer}</p>
            </div>
          ))
        ) : (
          <p>No matching posts found.</p>
        )}
      </div>
    </div>
  );
};

export default Home;
inside client src singlePost SinglePost.jsx import './SinglePost.css';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';

const SinglePost = () => {
    const [post, setPost] = useState(null);  // Track post data
    const [loading, setLoading] = useState(true); // Track loading state
    const [error, setError] = useState(null); // Track errors
    const { postID } = useParams();
    const navigate = useNavigate();
    const url = "http://localhost:8000/api/v1";  // Ensure it's correctly set

    // Fetch post from database
    const loadPost = async () => {
        try {
            console.log("Fetching post with postID:", postID);

            const response = await axios.get(${url}/getsinglepost, { 
                params: { postID } 
            });

            console.log("API Response:", response.data);

            if (response.data.success && response.data.responseData) {
                setPost(response.data.responseData);
                setError(null);
            } else {
                setError("No matching post found.");
            }
        } catch (error) {
            console.error("Error fetching post:", error);
            setError("Failed to load post. Please try again.");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadPost();
    }, [postID]);  // Refetch when postID changes

    useEffect(() => {
        console.log("Post state updated:", post);
    }, [post]);

    // Show loading state
    if (loading) return <p>Loading post...</p>;

    // Show error if fetching fails
    if (error) return <p className="error-message">{error}</p>;

    // Ensure post is available before rendering
    if (!post) return <p>No post available.</p>;

    return (
        <div className='single-post'>
            <h1 className='post-topic'>Topic: {post?.topic || "N/A"}</h1>
            <h2 className='post-question'><strong>Q:</strong> {post?.question || "N/A"}</h2>
            <p className='post-answer'><strong>A:</strong> {post?.answer || "N/A"}</p>
            <div className='btns'>
                <button onClick={() => navigate('/')} className='btn btn-back'>Back</button>
            </div>
        </div>
    );
};

export default SinglePost;
inside client src pages UpdatedPost.jsx import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';

const UpdatePost = () => {
    const { postID } = useParams();
    const navigate = useNavigate();
    const url = "http://localhost:8000/api/v1";

    // State for storing post details
    const [post, setPost] = useState({
        topic: '',
        question: '',
        answer: ''
    });

    // Load post details
    const loadPostDetails = async () => {
        try {
            const response = await axios.get(${url}/getsinglepost?postID=${postID});
            setPost(response?.data?.responseData);
        } catch (error) {
            console.error("Error fetching post:", error);
        }
    };

    // Handle input change
    const handleChange = (e) => {
        setPost({ ...post, [e.target.name]: e.target.value });
    };

    // Update post function
    const updatePost = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.put(${url}/updatepost, {
                postID,
                topic: post.topic,
                question: post.question,
                answer: post.answer
            });

            if (response.data.success) {
                alert("Post Updated Successfully!");
                navigate(/post/${postID}); // Redirect to updated post
            }
        } catch (error) {
            console.error("Error updating post:", error);
            alert("Failed to update post. Check console for details.");
        }
    };

    useEffect(() => {
        loadPostDetails();
        // eslint-disable-next-line
    }, []);

    return (
        <div className="update-post-container">
            <h2>Update Post</h2>
            <form onSubmit={updatePost}>
                <div>
                    <label>Topic:</label>
                    <input
                        type="text"
                        name="topic"
                        value={post.topic}
                        onChange={handleChange}
                        required
                    />
                </div>

                <div>
                    <label>Question:</label>
                    <input
                        type="text"
                        name="question"
                        value={post.question}
                        onChange={handleChange}
                        required
                    />
                </div>

                <div>
                    <label>Answer:</label>
                    <textarea
                        name="answer"
                        value={post.answer}
                        onChange={handleChange}
                        required
                    />
                </div>

                <button type="submit">Update</button>
                <button type="button" onClick={() => navigate('/')}>Cancel</button>
            </form>
        </div>
    );
};

export default UpdatePost;

App.jsx import './App.css';
import { useState } from 'react';
import Navbar from './components/navbar/Navbar';
import CreatePost from './pages/createPost/CreatePost';
import Home from './pages/home/Home';
import { Routes, Route } from 'react-router-dom';
import SinglePost from './pages/singlePost/SinglePost';

function App() {
    const [searchQuery, setSearchQuery] = useState('');

    return (
        <>
            {/* Pass setSearchQuery to Navbar */}
            <Navbar onSearch={setSearchQuery} />

            <Routes>
                <Route path='/' element={<Home searchQuery={searchQuery} />} />
                <Route path='/createpost' element={<CreatePost />} />
                <Route path='/updatepost/:postID' element={<CreatePost />} />
                <Route path='/:postID' element={<SinglePost />} />
            </Routes>
        </>
    );
}

export default App;
.env REACT_APP_SERVER_URL = 'http://localhost:8000/api/v1', Now inside server , server controllers post.controller.js import PostModal from '../models/post.model.js'

const CreatePost = async (req, res, next) => {
    try {
        const { topic, question, answer } = req.body;
        console.log(topic, question, answer);
        const responseData = await PostModal.create({
            topic,
            question,
            answer,
        })
        res.send({
            success: true,
            responseData,
        })
    } catch (error) {
        console.error("Error :: createPost :: \n" + error)
    }
}

const getPosts = async (req, res) => {
    try {
      const posts = await Post.find(); // Fetch all posts from MongoDB
      res.status(200).json(posts);
    } catch (error) {
      res.status(500).json({ message: "Error fetching posts", error });
    }
  };

const getSinglePost = async (req, res) => {
    try {
        const { postID } = req.query;

        console.log("Received postID:", postID);

        if (!postID) {
            return res.status(400).json({ success: false, message: "Missing postID" });
        }

        const post = await PostModel.findById(postID);

        if (!post) {
            return res.status(404).json({ success: false, message: "Post not found" });
        }

        res.json({ success: true, responseData: post });
    } catch (error) {
        console.error("Error fetching post:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};


const deletePost = async (req, res, next) => {
    try {
        const { postID } = req.body;
        if(!postID) throw Error("Pleas Provide post id");
        const responseData = await PostModal.findByIdAndDelete(postID)
        res.send({
            success: true,
            responseData,
        })
    } catch (error) {
        console.error("Error :: createPost :: \n" + error)
    }
}



const updatePost = async (req, res, next) => {
    try {
        const { postID, topic, question, answer } = req.body;
        if (!postID) return res.status(400).json({ success: false, message: "Post ID is required" });

        console.log("Updating post:", postID, topic, question, answer); // Debugging

        const updatedPost = await PostModal.findByIdAndUpdate(
            postID,
            { topic, question, answer },
            { new: true } // Returns updated data
        );

        if (!updatedPost) return res.status(404).json({ success: false, message: "Post not found" });

        res.json({ success: true, responseData: updatedPost });
    } catch (error) {
        console.error("Error :: updatePost ::", error);
        res.status(500).json({ success: false, message: "Internal Server Error" });
    }
};




export {
    CreatePost,
    getPosts,
    getSinglePost,
    deletePost,
    updatePost,
} , inside server db Connection1.js import mongoose from 'mongoose'

const connectWithMongoDB = async () => {
    try {
        const connectionInstance = await mongoose.connect(process.env.MONGO_URL)
        console.log("Mongo connection successfull!!...on host : " + connectionInstance.connection.host)
    } catch (error) {
        console.error("db :: connection :: error : " + error)
    }
}; 

export default connectWithMongoDB;, server models post.model.js import mongoose, { mongo } from "mongoose";

const PostSchema = mongoose.Schema({
    topic: {
        type: String,
        required: [true, "heading is required"],
    },
    question: {
        type: String,
        required: [true, "Question is required"],
    },
    answer: {
        type: String,
        required: [true, "Answer is required"],
    }
})

const PostModal = mongoose.model('QuestionPost', PostSchema);
export default PostModal;, inside Server routes post.route.js import { Router } from 'express';
import { CreatePost, deletePost, getPosts, getSinglePost, updatePost } from '../controllers/post.controller.js';
const router = Router();

router.post('/createpost', CreatePost)
router.get('/getposts', getPosts)
router.get('/getsinglepost', getSinglePost)
router.delete('/deletepost', deletePost)
router.put('/updatepost', updatePost)


export default router;, .env MONGO_URL = mongodb+srv://patelabhiraj222:Abhi775888@cluster0.labl0.mongodb.net/QuestionBank?retryWrites=true&w=majority&appName=Cluster0, server.js import dotenv from 'dotenv';
dotenv.config();
import express from 'express';
const app = express();
import PostRoute from './routes/post.route.js'
import connectWithMongoDB from './db/Connection1.js'
import cors from 'cors'

app.use(cors({}));
    

connectWithMongoDB();

// For parsing application/json
app.use(express.json());

// For parsing application/x-www-form-urlencoded
app.use(express.urlencoded({ extended: true }));

app.use('/api/v1', PostRoute);

app.get('/',(req,res)=>{
    res.send({
        activeStatus:true,
        error:false,
    })
})

app.listen(8000, () => {
    console.log("Server is listening on port http://localhost:8000");
})

